{"title":"AWS Serverless 實作 — 下","date":"2019-07-25T17:30:25.000Z","date_formatted":{"ll":"Jul 26, 2019","L":"07/26/2019","MM-DD":"07-26"},"thumbnail":"https://cdn-images-1.medium.com/max/2000/1*mRv_YtyDuE_wypl2mGvbew.png","link":"2019/07/26/AWS_Serverless_04","comments":true,"tags":["Amazon Web Services","Lambda","Serverless","Visual Studio Code"],"categories":["Amazon Web Services"],"updated":"2020-04-13T23:55:01.573Z","content":"<h1 id=\"aws-serverless-實作下\">AWS Serverless 實作 — 下<a href=\"#aws-serverless-實作下\" title=\"AWS Serverless 實作 — 下\"></a></h1><p>延續上篇AWS Serverless 實作 — 上篇章，有幸參加了AWS在北科集思會議中心開的Workshop課程，由講師手把手帶領實作，並部署到線上來串接服務。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*mRv_YtyDuE_wypl2mGvbew.png\" class=\"φcy\"></p>\n<h2 id=\"使用oauth-20啟用第三方應用程序\">使用OAuth 2.0啟用第三方應用程序<a href=\"#使用oauth-20啟用第三方應用程序\" title=\"使用OAuth 2.0啟用第三方應用程序\"></a></h2><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*zwd3-U5so9mpRi2yb8o7Hw.png\" class=\"φcy\"></p>\n<p>我們先用先前的方式創建一個Lambda函式ListUnicornRides，並在Repo裡面把ListUnicornRides.js複製到編輯器，並記得把政策角色改成我們在前面設定好的角色。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4364/1*Shk0HJFAh0ErqgNIxQ5hjw.png\" class=\"φcy\"></p>\n<p>接下來創立另一個函式ListUnicornAuthorizer，完成之後再編輯器的位置點選上傳Zip檔</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2260/1*zmXfpOTv1KCVLHT69BAdTw.png\" class=\"φcy\"></p>\n<p>上傳成功之後會在編輯器中出現程式碼</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5264/1*opX7TWKFgeaJC-O8bnLC0w.png\" class=\"φcy\"></p>\n<p>完成之後編輯下面的環境變數，屬性填入USER_POOL_ID，值就是Config.js我們填過的userPoolId，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5260/1*CBWX6NSojHBqpMp3nBtxDg.png\" class=\"φcy\"></p>\n<p>到API Gateway的授權方部分，點選創建新的授權方，選擇Lambda驗證而不是Cognito，選擇ListUnicornAuthorizer函式當我們的驗證器，設定如下</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2836/1*BtvGZIYmvw9mo7tuOHdGdg.png\" class=\"φcy\"></p>\n<p>創建完成之後我們在資源裡的/ride增加一個GET Methods，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5024/1*B440Xc2ZqYhJIXi1dzWqVA.png\" class=\"φcy\"></p>\n<p>按照我們的作法，完成之後一樣在方法請求裡面選擇驗證，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5024/1*xG_ysYv1Zhwpb9EaRsAlNQ.png\" class=\"φcy\"></p>\n<p>選擇我們剛剛成功上傳的自定義驗證。完成之後請點選部署API</p>\n<p>到S3點選創建儲存貯體</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4532/1*DcsutVY8nA-YqBvAJZKM-Q.png\" class=\"φcy\"></p>\n<p>輸入唯一的儲存貯體名稱直接點選建立，</p>\n<pre><code>{\n     &quot;Version&quot;: &quot;2012-10-17&quot;,\n     &quot;Statement&quot;: [\n         {\n             &quot;Effect&quot;: &quot;Allow&quot;,\n             &quot;Principal&quot;: &quot;*&quot;,\n             &quot;Action&quot;: &quot;s3:GetObject&quot;,\n             &quot;Resource&quot;: &quot;arn:aws:s3:::[YOUR_BUCKET_NAME]/*&quot;       \n         }     \n     ] \n}</code></pre><p>把上面的Name改成你的儲存貯體名稱之後進到儲存貯體更改設定，我們先把公開存取打開（不然會出錯），</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5284/1*58yTMdXmn2d4krZHm7NWEw.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5296/1*5hEzeJVwnHthZ7aZoD-Stg.png\" class=\"φcy\"></p>\n<p>接下來到政策這裡填入剛剛的程式碼。之後到屬性打開靜態網站託管。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5284/1*tBmphqaLZJzL7pEPP0dLlQ.png\" class=\"φcy\"></p>\n<p>完成之後我們要來設定CDN</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5284/1*ijacbwoVQrFkddVFsKhL0A.png\" class=\"φcy\"></p>\n<p>建立分佈</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3696/1*pEA4Git-AQkGuYS0V3sDAw.png\" class=\"φcy\"></p>\n<p>因為我們是做靜態網頁，所以點選Web。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3980/1*4RpZQAbcmxWq7F9HD_jmFQ.png\" class=\"φcy\"></p>\n<p>並確保重新導向Http到Https加強安全性，在底下的分佈請選擇最低價格等級的CDN</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3488/1*PsCqWppbJok5qHEIrv_tmw.png\" class=\"φcy\"></p>\n<p>不然會分佈到全球CDN。</p>\n<p>接下來到Cognito設定我們要來取用的App Client，到先前設定的WildRydes，再到左邊的應用程式用戶端裡增加可以連線的Client端，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4252/1*B6rsK_ZAG3h1ogLDw7p2eQ.png\" class=\"φcy\"></p>\n<p>一樣取消勾選用戶端密碼並建立。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5616/1*h7dtmvwCWlQKElS3q92cKA.png\" class=\"φcy\"></p>\n<p>點選左邊的網域給驗證的服務加入網域，可以根據自己需求自訂。</p>\n<p>加入完成之後我們需要建立起資源伺服器。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5616/1*uorPMtmqAVwNMy747WKqNw.png\" class=\"φcy\"></p>\n<p>點選左邊資源伺服器，開啟之後新增以上參數</p>\n<pre><code>UnicornServer\nUnicornManager \n&quot;Allow listing of rides for unicorns&quot;</code></pre><p>描述可以自己定，完成之後建立，接下來設定Client端的需求，點選，左邊的應用程式用戶端設定。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2018/1*urgY2Lgm6sZYZXs-8kn2SA.png\" class=\"φcy\"></p>\n<p>根據上面設定或是自己的需求。請記得選對卡片，不要選到第一個，點選儲存。</p>\n<p>接下來上傳Oauth測試頁面，我們把<a href=\"https://github.com/aws-samples/aws-serverless-workshops/tree/master/WebApplication/5_OAuth/UnicornManager\" target=\"_blank\">AWS WorkShop Repo</a>的資料夾下載下來，更改Config.js，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3320/1*RAPlVDf6IrDSuBqjsDpUfA.png\" class=\"φcy\"></p>\n<p>根據上面的講解把我們剛剛設定的東西填入，接下來到資料夾底下，打開Terminal</p>\n<pre><code>aws s3 sync . s3://YOUR_BUCKET_NAME --region YOUR_BUCKET_REGION</code></pre><p>使用上述程式碼把資料夾傳上去，並注意更改region name，接下來就會把整個資料夾上傳到S3，</p>\n<p>上傳完成之後，我們可以在網址輸入cloudfront提供的CDN網址，來看我們的網頁狀況。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3216/1*ID0G-fdlZPbP9HzePNcsiw.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3216/1*PKqJgq54str6zfavJb_vKg.png\" class=\"φcy\"></p>\n<p>還可以重設密碼等等</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3912/1*1bLP-VwAcCePZAvlUpuN4Q.png\" class=\"φcy\"></p>\n<p>登入之後就可以看到登入畫面了。</p>\n<h2 id=\"serverless-graphql-api：\"><strong>Serverless GraphQL API：</strong><a href=\"#serverless-graphql-api：\" title=\"Serverless GraphQL API：\"></a></h2><p><img src=\"https://cdn-images-1.medium.com/max/4548/1*J5DVQ6210TVz94K-57yk6g.png\" class=\"φcy\"></p>\n<p>既然是Serverless，當然不可缺少GraphQL API，這邊將使用<a href=\"https://aws.amazon.com/appsync/\" target=\"_blank\">AWS AppSync</a>來實作GraphQL API後端。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4268/1*rZEfMN2HLJmekOhCMkO_Kg.png\" class=\"φcy\"></p>\n<p>首先到AppSync Console創建新的app，選擇Import，然後點開始。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4268/1*it7ST2EWxf1yEn5vO3N92w.png\" class=\"φcy\"></p>\n<p>選擇之前創建的資料表，創建。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3760/1*naaWZa1K1fSGzKVBykFlCg.png\" class=\"φcy\"></p>\n<p>接下來新開一個TAB到DynamoDB，選擇資料表，點選項目，隨意點一個Row，並打開它，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3120/1*Bwx8WacR-svnD9kgR4n8iQ.png\" class=\"φcy\"></p>\n<p>點選顯示格式到 Text，並勾選DynamoDB JSON，觀察欄位的Type，並一一填入剛剛的創建設定。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4148/1*TshQjz10tEZ-fWfccRgUFQ.png\" class=\"φcy\"></p>\n<p>基本上依據範本做的話就是上述設定，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4144/1*2127Mmqy2oygWluE-AW2xQ.png\" class=\"φcy\"></p>\n<p>到下一頁輸入API名稱，點選創立</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4348/1*hGBhoJg86KUu5CP_12L6DA.png\" class=\"φcy\"></p>\n<p>成功之後會出現上述畫面。</p>\n<h3 id=\"建立一個query查詢unicornname\">建立一個Query查詢UnicornName:<a href=\"#建立一個query查詢unicornname\" title=\"建立一個Query查詢UnicornName:\"></a></h3><p>點選左邊的Schema，然後在Schema中尋找type Query{}，並加入以下程式碼：</p>\n<pre><code>getRidesByUnicornName(UnicornName: String, limit: Int, nextToken: String): RidesConnection</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/4348/1*BUGQ1fMhhufgJbRvF3Yv3w.png\" class=\"φcy\"></p>\n<p>按下儲存之後，在Resolvers可以看到更新</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4348/1*3adKcmYxHnagiL-HTFkLhQ.png\" class=\"φcy\"></p>\n<p>點下Attach來啟用Query，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4348/1*AiQI3GoSyJfcFI01PAiurg.png\" class=\"φcy\"></p>\n<p>資料表選擇Rides，在配置的部分選擇分頁搜尋。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4072/1*T6O3clTDSR4-bnuNIsJqxA.png\" class=\"φcy\"></p>\n<p>把Query改成Scan，屬性改成UnicornName</p>\n<pre><code>{\n    &quot;version&quot; : &quot;2017-02-28&quot;,\n    &quot;operation&quot; : &quot;Scan&quot;,\n    &quot;filter&quot; : {\n        ## Provide a query expression. **\n        &quot;expression&quot;: &quot;UnicornName = :UnicornName&quot;,\n        &quot;expressionValues&quot; : {\n            &quot;:UnicornName&quot; : {\n                &quot;S&quot; : &quot;${ctx.args.UnicornName}&quot;\n            }\n        }\n    },\n    ## Add &apos;limit&apos; and &apos;nextToken&apos; arguments to this field in your schema to implement pagination. **\n    &quot;limit&quot;: $util.defaultIfNull(${ctx.args.limit}, 20),\n    &quot;nextToken&quot;: $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}</code></pre><p>可以複製貼上，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4024/1*G34_e-wmGU69awM5fIZ45A.png\" class=\"φcy\"></p>\n<p>下一個卡的配置選擇Return paginated results，接下來儲存。</p>\n<h3 id=\"設定權限：\">設定權限：<a href=\"#設定權限：\" title=\"設定權限：\"></a></h3><p>儲存之後點選左邊的Setting並設定權限</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3032/1*Mn3kdU0NMPDuuHPB47WPYQ.png\" class=\"φcy\"></p>\n<p>選擇由User Pool來處理權限，並選取前篇文章設定，接下來儲存。</p>\n<p>我們需要驗證剛剛的查詢是否正常，假設有在先前的實作中，有實際註冊一個第三方Oauth帳戶，那我們就可以利用那個帳戶，來做驗證流程。點選左邊的Queries，點選Login with User Pools並輸入先前在Cognito</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2492/1*XxawGIH7JsbNofptW8IjHg.png\" class=\"φcy\"></p>\n<p>接下來點選Login with User Pools，然後把測試用的用戶帳密輸入，務必注意＠的部分要改成-at-，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*Ogg9XO4HLy7yWWHBkp1-5A.png\" class=\"φcy\"></p>\n<p>接下來按下儲存，我們就開始測試Query流程</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2774/1*vB9oXiaJ4sW5KtqmgBLD3w.png\" class=\"φcy\"></p>\n<p>在開始之前先把創建的語法刪掉，如上圖，不然會創建資料。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4218/1*GEu1UM6zFZJNEJBMSORpxg.png\" class=\"φcy\"></p>\n<p>之後就可以在這邊測試各個查詢，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*P_8UPsCAoDY5CyQRky5YdA.png\" class=\"φcy\"></p>\n<p>接下來我們加入剛剛建立的查詢語法，因為我在資料表的部分有輸入錯誤，所以才填ID，照著範例走的話是填入Id ，點擊查詢（箭頭）按鈕，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3260/1*ZMtPsmClPIfdyxvRu7PGQg.png\" class=\"φcy\"></p>\n<p>加入之後就可以測試看右邊的結果，這就是利用AWS AppSync的GraphQL API測試。</p>\n<h3 id=\"清理實作的資源：\">清理實作的資源：<a href=\"#清理實作的資源：\" title=\"清理實作的資源：\"></a></h3><p>AppSync GraphQL API</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*HIkcXS8mJwP1B8klyQOw3A.png\" class=\"φcy\"></p>\n<ol><li><p>到AppSync 控制台。</p>\n</li>\n<li><p>選好這次創的API。</p>\n</li>\n<li><p>從右上角選擇“ 刪除 ”。</p>\n</li>\n<li><p>完成。</p>\n</li>\n</ol><p>OAuth清理</p>\n<ol><li><p>到CloudFront 。</p>\n</li>\n<li><p>選擇在範例創建好的Web項目，然後先停用，如果選最高的服務，應該會需要一段時間。</p>\n</li>\n<li><p>刪除該項目。</p>\n</li>\n<li><p>到S3控制台，直接把unicornmanager-xxx刪除。</p>\n</li>\n<li><p>到Lambda控制台，把ListUnicornRides，ListUnicornAuthorizer函數刪掉。</p>\n</li>\n</ol><p>REST API</p>\n<ol><li><p>到API Gateway。</p>\n</li>\n<li><p>把前面創的API Gateway刪掉（進到API裡面有個操作可以按刪除）。</p>\n</li>\n</ol><p>Serverless Backend</p>\n<ol><li><p>到Lambda。</p>\n</li>\n<li><p>把RequestUnicorn函數刪掉。</p>\n</li>\n<li><p>點右上角頭像的安全登入資料。</p>\n</li>\n<li><p>到角色，搜尋WildRydesLambda 把剛剛的角色刪除。</p>\n</li>\n<li><p>到<a href=\"https://console.aws.amazon.com/dynamodb/home\" target=\"_blank\">DynamoDB</a>。</p>\n</li>\n<li><p>選資料表，然後刪除資料表，記得一並刪除CloudWatch。</p>\n</li>\n</ol><p>User Pool</p>\n<ol><li><p>到<a href=\"https://console.aws.amazon.com/cognito/home\" target=\"_blank\">Amazon Cognito</a>。</p>\n</li>\n<li><p>選擇 WildRydes，先到左邊的網域名稱刪除掉網域。</p>\n</li>\n<li><p>回到首頁，右上角會有刪除集區，刪除。</p>\n</li>\n</ol><p>Web App</p>\n<ol><li><p>到<a href=\"https://console.aws.amazon.com/amplify/home\" target=\"_blank\">Amplify</a>。</p>\n</li>\n<li><p>刪掉APP(進App之後右上角）</p>\n</li>\n<li><p>到<a href=\"https://console.aws.amazon.com/codesuite/codecommit/repositories\" target=\"_blank\">AWS CodeCommit</a>。</p>\n</li>\n<li><p>刪掉Repo。</p>\n</li>\n</ol><p>CloudWatch</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*nomyLcwMEgReipJxZh3tWg.png\" class=\"φcy\"></p>\n<ol><li><p>到 CloudWatch 。</p>\n</li>\n<li><p>選擇日誌，刪掉這次實作的所有日誌。</p>\n</li>\n</ol><h2 id=\"完成\">完成<a href=\"#完成\" title=\"完成\"></a></h2><h2 id=\"結語\">結語<a href=\"#結語\" title=\"結語\"></a></h2><p>關於圖片預處理的部分會另外開章節講解，這兩篇章節主要還是大略講解了各服務的詳細設定。這次WorkShop主要還是很豐富的講解了AWS各項服務的內容，主要還是推薦想要設計架構的人來學習，因為在服務間的串接，經過這次的WorkShop也比較清楚如何在設定上清楚的設定權限跟服務，還可以處理好自動化流程，減去工程師在非業務邏輯上的時間，當然也推薦全端工程師修煉好雲的架構流程，因為在服務串接上，可以根據自己需求串接不同雲，但會比較建議全都在同一個雲上，相對的串接上比較單純容易，服務相容性也會高很多。</p>\n<p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","prev":{"title":"使用Amplify持續交付Angular專案到Serverless Web app上","link":"2019/07/31/amplify"},"next":{"title":"AWS Lambda 除錯小技巧-Python","link":"2019/07/26/AWS_Serverless_05"},"plink":"https://chenkuansun.github.io/2019/07/26/AWS_Serverless_04/","toc":[{"id":"aws-serverless-實作下","title":"AWS Serverless 實作 — 下","index":"1","children":[{"id":"使用oauth-20啟用第三方應用程序","title":"使用OAuth 2.0啟用第三方應用程序","index":"1.1"},{"id":"serverless-graphql-api：","title":"Serverless GraphQL API：","index":"1.2","children":[{"id":"建立一個query查詢unicornname","title":"建立一個Query查詢UnicornName:","index":"1.2.1"},{"id":"設定權限：","title":"設定權限：","index":"1.2.2"},{"id":"清理實作的資源：","title":"清理實作的資源：","index":"1.2.3"}]},{"id":"完成","title":"完成","index":"1.3"},{"id":"結語","title":"結語","index":"1.4"}]}]}