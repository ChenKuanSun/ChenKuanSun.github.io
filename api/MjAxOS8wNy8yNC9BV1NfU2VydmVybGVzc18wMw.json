{"title":"AWS Serverless 實作 — 上","date":"2019-07-23T18:46:25.000Z","date_formatted":{"ll":"Jul 24, 2019","L":"07/24/2019","MM-DD":"07-24"},"thumbnail":"https://cdn-images-1.medium.com/max/2000/1*mRv_YtyDuE_wypl2mGvbew.png","link":"2019/07/24/AWS_Serverless_03","comments":true,"tags":["Amazon Web Services","Lambda","Serverless","Visual Studio Code"],"categories":["Amazon Web Services"],"updated":"2020-04-13T23:55:01.573Z","content":"<h1 id=\"aws-serverless-實作上\">AWS Serverless 實作 — 上<a href=\"#aws-serverless-實作上\" title=\"AWS Serverless 實作 — 上\"></a></h1><p>延續上幾篇Lambda的篇章，有幸參加了AWS在北科集思會議中心開的Workshop課程，由講師手把手帶領實作，並部署到線上來串接服務。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*mRv_YtyDuE_wypl2mGvbew.png\" class=\"φcy\"></p>\n<h2 id=\"安裝\">安裝<a href=\"#安裝\" title=\"安裝\"></a></h2><p>假設大家都有遵循上幾篇教學在本地端安裝好SAM(Serverless Application Model)，並成功啟用AWS-CLI及憑證，Connect完成後請先輸入</p>\n<pre><code>aws sts get-caller-identity</code></pre><p>可以看見你已經連線的AWS帳號、ID及ARN，</p>\n<pre><code>{\n    &quot;UserId&quot;: &quot;XXXXXXXXX&quot;,\n    &quot;Account&quot;: &quot;XXXXXXXXX&quot;,\n    &quot;Arn&quot;: &quot;arn:aws:iam::000000000000000:user/000&quot;\n}</code></pre><h2 id=\"使用aws-amplify-console創建靜態頁面\">使用AWS Amplify Console創建靜態頁面<a href=\"#使用aws-amplify-console創建靜態頁面\" title=\"使用AWS Amplify Console創建靜態頁面\"></a></h2><p>我們先試做AWS Amplify Console，這個是AWS 針對Angular、React、Vue等常用框架做一個Git工作流程自動化部署的控制台，首先我們會用到以下服務：</p>\n<ul><li><p><a href=\"https://aws.amazon.com/tw/amplify/console/\" target=\"_blank\">AWS Amplify Console</a></p>\n</li>\n<li><p><a href=\"https://aws.amazon.com/tw/codecommit/\" target=\"_blank\">AWS CodeCommit</a></p>\n</li>\n</ul><p>有興趣的讀者可以去看相關介紹，基本上CodeCommit這個服務不是必要的服務，可以使用Github、Bitbucket、Gitlab或是自己處理S3等儲存媒介的儲存庫。要用到codecommit的讀者請先在本地Git bash設定裡加入設定，這個設定是讓git使用IAM憑證登入AWS codecommit</p>\n<pre><code>git config --global credential.helper &apos;!aws codecommit credential-helper $@&apos;\ngit config --global credential.UseHttpPath true</code></pre><p>完成之後我們需要在AWS <a href=\"https://console.aws.amazon.com/codesuite/codecommit/repositories\" target=\"_blank\">Codecommit</a>創建一個Repo，創建完後點選右上角的複製Https Clone到本地端</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2304/1*nzBN_R0bzlWjkXwc2DOKiA.png\" class=\"φcy\"></p>\n<p>從S3下載範例並存放到剛剛的repo資料夾</p>\n<pre><code>aws s3 cp s3://wildrydes-us-east-1/WebApplication/1_StaticWebHosting/website ./ --recursive</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/4672/1*zmF_2qtN5Im9Tiq9vJ5zNg.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4624/1*iX3MIiuJZ-g6UrHPOXMXhg.png\" class=\"φcy\"></p>\n<p>複製好之後push上去Repo，並到<a href=\"https://console.aws.amazon.com/amplify/home\" target=\"_blank\">Amplify Console console page</a>開始自動化佈屬流程，點選Deploy下面的Start，如果是控制台頁面點選Connect，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4248/1*gR8iXdHy8AmDMFTuVtu-ig.png\" class=\"φcy\"></p>\n<p>點選完之後，保持預設設定（當然有特殊需求可以根據自己情況修改），</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4408/1*8RbSRKyWKBMCiZQAS9kfng.png\" class=\"φcy\"></p>\n<p>接下來會開始部署流程，可以點入Provision觀察Log</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4076/1*s2ov_UJOol_6zWTEK9kD1Q.png\" class=\"φcy\"></p>\n<p>可以知道他們是直接拉Docker來創建流程，如果一直部署有問題可以考慮拉他們的Image自己本地測試，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4288/1*Y2myXWjcFTsr6ZSVnQMkzg.png\" class=\"φcy\"></p>\n<p>接下來Build流程會開始Clone流程，會從Repo Clone到容器內開始Build</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4148/1*zrjKs3AQcx2C515xSzyMUw.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4384/1*7H-9Rf2YIjfiNWpbmLb2Hw.png\" class=\"φcy\"></p>\n<p>完成之後可以點選網址，就可以看到部署玩的網頁內容，可以點選Verify，會自動幫忙Scale各個手機版面的View。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4384/1*HZKrTibXqnq_q0a_SFJICg.png\" class=\"φcy\"></p>\n<p>之後只要改變Repo然後Push的話，<a href=\"https://console.aws.amazon.com/amplify/home\" target=\"_blank\">Amplify Console</a>會自動幫你進行到佈建流程，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4384/1*l-8BN6cs73q7TjKSXAkKvw.png\" class=\"φcy\"></p>\n<p>所以建議大家不要用Master來當作開發的分支，盡量在Code Review完之後再Merge進來做Deploy的動作。</p>\n<h2 id=\"使用cognito用戶身份驗證\">使用Cognito用戶身份驗證<a href=\"#使用cognito用戶身份驗證\" title=\"使用Cognito用戶身份驗證\"></a></h2><p>首先建立身份集區</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4248/1*aqsqHWpFbdar7LXXoO9I6A.png\" class=\"φcy\"></p>\n<p>點選管理使用者集區，然後點選建立使用者集區，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4580/1*_puaGhR2ol7vFjab6TWAtQ.png\" class=\"φcy\"></p>\n<p>填入唯一名稱，然後點選預設值，直接按建立，可以根據自己需求更改，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5588/1*gJ0bAXThX5r2Q3iRa40eIg.png\" class=\"φcy\"></p>\n<p>建立完成之後點選左邊一般設定的應用程式用戶端來建立WebApp連線使用的設定檔，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5588/1*9tU1wDSGGYykXh71bZ0DvQ.png\" class=\"φcy\"></p>\n<p>取消產生用戶端密碼讓使用者自行輸入，填用戶端名稱（userPoolId），</p>\n<p>建立完成會有一組連線的key，把他複製出來，到上一段的Repo裡面的js/config.js，打開之後填入剛剛的資訊</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3356/1*jXatmoouxTp5ZXmXR7EGLA.png\" class=\"φcy\"></p>\n<p>並且在這裡填入PoolId（ 在使用者集區上面），然後儲存之後Push上去</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4580/1*dEMmljM9MnnS28v7chyxMg.png\" class=\"φcy\"></p>\n<p>等到部署完成之後，可以到網址下的/register.html裡註冊帳號，完成之後如果點選沒反應，代表有問題，記得打開瀏覽器的DevTool檢查Error。填完之後會寄一封認證信到信箱並到認證頁面。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4580/1*nKyknXHdFkUKIAs1msHrhA.png\" class=\"φcy\"></p>\n<p>然後驗證完之後就可以實施登入動作了。</p>\n<p>在OSX這邊使用者可能會遇到Push上去有403的問題，問題原因在於Mac會將金鑰存入鑰匙圈，然後15分鐘後AWS那邊會刷新，就會有403的狀況，有幾個方法</p>\n<ol><li><p>修改codecommit驗證金鑰成顯性金鑰</p>\n</li>\n<li><p>改用SSH Push</p>\n</li>\n<li><p>直接在Mac裡搜尋Keychain，在Keychain內搜尋AWS Region(us-eastXXX)，會看到Git-codecommit開頭的金鑰，進入之後到取用控制，把應用程式刪除，就可以使用，每次都會詢問，都要按拒絕，比較煩人的是每次Fetch都會問，最好的方式是用上面兩種方法。</p>\n</li>\n</ol><p><img src=\"https://cdn-images-1.medium.com/max/4580/1*S9RhfPzHc1qcCfVfEAtcng.png\" class=\"φcy\"></p>\n<h2 id=\"serverless後端架構\">Serverless後端架構<a href=\"#serverless後端架構\" title=\"Serverless後端架構\"></a></h2><p>在開始之前如果沒有預先設定IAM的話，要先設定好 IAM角色來使用AWS服務串接，並給Lambda函數權限將日誌寫入Amazon CloudWatch Logs並讀寫DynamoDB。</p>\n<p>我們先開好<a href=\"https://console.aws.amazon.com/dynamodb/home\" target=\"_blank\">DynamoDB</a>的Table，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4844/1*yhhxr5-yCsdaSwSNpWbwnA.png\" class=\"φcy\"></p>\n<p>到首頁點選建立資料表。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4340/1*nhLlMlDShwhpvgDk3u0Xnw.png\" class=\"φcy\"></p>\n<p>輸入好資料名稱，然後索引設定，創立資料表。</p>\n<p>設定IAM，先到帳號點選安全登入資料。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*92oPn9Sbd_B6xnrYvPskmg.png\" class=\"φcy\"></p>\n<p>進入控制台之後，點選左邊角色，並建立角色，點選Lambda服務</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4340/1*ORMqr79QvLd9IjD4eHDglA.png\" class=\"φcy\"></p>\n<p>點選下一步，在輸入欄裡搜尋</p>\n<pre><code>AWSLambdaBasicExecutionRole</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/4340/1*BTWpkCEQPiParjKPJ7lajQ.png\" class=\"φcy\"></p>\n<p>勾選之後輸入IAM的名稱等，點選下一步創立，可以加入自己的Tag，一直到建立完成。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4540/1*okc-BWI9R1lrTvtPQNtNWw.png\" class=\"φcy\"></p>\n<p>接下來輸入剛剛的關鍵字可以看到創立完成，點進去角色，之後可以看到詳細資料</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4616/1*nwHHLfWWFkS4SXPnC6fWiQ.png\" class=\"φcy\"></p>\n<p>點選右邊的新增內嵌政策來允許Lambda存取其他服務。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5144/1*1_XFYwGFdoS3GqAB6TYjlQ.png\" class=\"φcy\"></p>\n<p>填入DB會過濾出服務，點選DynamoDB</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5144/1*954Cp3bP1GOcMWsZlDwCiQ.png\" class=\"φcy\"></p>\n<p>打入Put過濾出Put點選PutItem</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3044/1*-kxx1nyWobMnp2Jd-bEtbA.png\" class=\"φcy\"></p>\n<p>輸入剛剛建立的Dynamodb建立的資料表資訊，也可以到DB裡面直接複製ARN，然後輸入政策的名稱。建立好政策。</p>\n<p>建立Lambda的函式：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5232/1*msOykN27067a---YpDtz4Q.png\" class=\"φcy\"></p>\n<p>點選建立函式，在Name的部分輸入：</p>\n<pre><code>RequestUnicorn</code></pre><p>並選擇Node.js的環境（範例專案是使用這個版本）</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5128/1*a8-PO2Z1GehlPDPw_CY1BA.png\" class=\"φcy\"></p>\n<p>在下面的許可中點開，並選擇我們剛剛創立的角色。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5128/1*tHyqejfEJ_MwOsZC0S492Q.png\" class=\"φcy\"></p>\n<p>點選建立函式，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5324/1*fgcp_C0dCruC8uJU7f4vdA.png\" class=\"φcy\"></p>\n<p>滑鼠拖到下面可以看到編輯區<br>把Repo裡的requestUnicorn.js內容整段複製取代掉編輯區裡的程式碼，因為主索引鍵是RideId，所以要確認好nodejs裡的範例程式碼的資料有沒有對齊主索引鍵（大小寫視為不同）。按下儲存之後，在右上的選擇測試事件內點選設定測試事件。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3316/1*7-pziD9IzS70z4qMdcJvsw.png\" class=\"φcy\"></p>\n<p>在編輯區填入這段測試的Request</p>\n<pre><code>{\n     &quot;path&quot;: &quot;/Rides&quot;,\n     &quot;httpMethod&quot;: &quot;POST&quot;,\n     &quot;headers&quot;: {\n         &quot;Accept&quot;: &quot;*/*&quot;,\n         &quot;Authorization&quot;: &quot;eyJraWQiOiJLTzRVMWZs&quot;,\n         &quot;content-type&quot;: &quot;application/json; charset=UTF-8&quot;\n     },\n     &quot;queryStringParameters&quot;: null,\n\n     &quot;pathParameters&quot;: null,\n     &quot;requestContext&quot;: {\n         &quot;authorizer&quot;: {\n             &quot;claims&quot;: {\n                 &quot;cognito:username&quot;: &quot;the_username&quot;\n             }\n         }\n     },\n     &quot;body&quot;: &quot;{\\&quot;PickupLocation\\&quot;:{\\&quot;Latitude\\&quot;:47.6174755835663,\\&quot;Longitude\\&quot;:-122.28837066650185}}&quot; }</code></pre><p>記得在Path裡面把ride改成資料表的名稱。</p>\n<p>點選測試可以看到</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4368/1*lJoRqvUV9UIC-Jjvh1WKEQ.png\" class=\"φcy\"></p>\n<p>這樣就完成了Lambda的實作</p>\n<h2 id=\"使用amazon-api-gateway的restful-api呼叫lambda\">使用Amazon API Gateway的RESTful API呼叫Lambda<a href=\"#使用amazon-api-gateway的restful-api呼叫lambda\" title=\"使用Amazon API Gateway的RESTful API呼叫Lambda\"></a></h2><p><img src=\"https://cdn-images-1.medium.com/max/5228/1*HOf2OBmiBCACpP-XNhoKhw.png\" class=\"φcy\"></p>\n<p>首先到 A<a href=\"https://console.aws.amazon.com/apigateway/home\" target=\"_blank\">mazon API Gateway Console</a>創立API</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5708/1*GtY7WnxRFgKEoqWNdcq7ig.png\" class=\"φcy\"></p>\n<p>創立之後我們要先串接<a href=\"https://mgleon08.github.io/blog/2018/07/16/jwt/\" target=\"_blank\">JWT驗證</a>，點選左邊的授權方並建立。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3356/1*WZ0bMwOCrKOtHCXG62qkEw.png\" class=\"φcy\"></p>\n<p>輸入名稱，Cognito選擇早些時候創立的使用者集區，建立好之後到我們部署好的頁面，在剛剛登入成功的時候有返回一組Token，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5384/1*MsosRN_d6ABl6cFXQ0SMIg.png\" class=\"φcy\"></p>\n<p>複製下來之後，到API Gateway來貼上測試</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5384/1*aENIi7K_buIXO-HNYq6jAw.png\" class=\"φcy\"></p>\n<p>貼上測試完之後會返回200代表成功。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4076/1*gkyyal6IX-cT_J2sQ53oag.png\" class=\"φcy\"></p>\n<p>接下來要練習創立資源，到資源裡面點選建立資源，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4076/1*O7uWicW0eWxUb_Uv3polJQ.png\" class=\"φcy\"></p>\n<p>勾選CORS之後建立，點擊ride來建立endpoint的Methods</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4076/1*zYgQS-7QSB1A-yd74iSE9A.png\" class=\"φcy\"></p>\n<p>然後選擇POST</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4000/1*wWdStHmnj9qCqxGXlK8_hQ.png\" class=\"φcy\"></p>\n<p>創立好之後我們要連結到Lambda來讓Endpoint來執行這個Function，勾選代理整合，然後輸入Lambda的名稱。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4000/1*j--rLeMGz3UVvuS-kHWNeA.png\" class=\"φcy\"></p>\n<p>完成之後會創立Post，裡面有POST的各個流程Node，因為要建立權限不讓其他人隨意存取，所以點選方法請求，把授權方指向使用者集區</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4000/1*CD1G2mzI4QSgTjJkVgrZ7A.png\" class=\"φcy\"></p>\n<p>點選之後記得點選勾勾來套用，</p>\n<p>接下來部署API</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4000/1*WeFK4LdWQfn5u0Pr3WN6yQ.png\" class=\"φcy\"></p>\n<p>點選操作，然後部署，選擇階段或是新增階段，填入名稱（prod)，按下部署。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4056/1*0Qs73asg-BhFONhVq6KVLQ.png\" class=\"φcy\"></p>\n<p>接下來到我們Repo裡的config.js裡面把invokeUrl填入上面呼叫用URL在Push上去，等待Deploy完成進去我們的頁面。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*LaLMJv5ct1AIdg0DkpV1_A.png\" class=\"φcy\"></p>\n<p>點選一個點然後點選上面的按鈕來測試我們的Lambda</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*lcO9pkShGIpuH7y2pzd6ZQ.png\" class=\"φcy\"></p>\n<p>接下來就會看到我們的彩虹小馬出現了！也完成了我們的Serverless服務串接。</p>\n<h3 id=\"下篇，aws-serverless-實作--下\"><a href=\"https://medium.com/@fgriasa123/aws-serverless-%E5%AF%A6%E4%BD%9C-%E4%B8%8B-8c87fdc12557?sk=fae14df9c5ec5d5bfb036f2681137c00\" target=\"_blank\">下篇，AWS Serverless 實作 — 下</a><a href=\"#下篇，aws-serverless-實作--下\" title=\"下篇，AWS Serverless 實作 — 下\"></a></h3><p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","prev":{"title":"AWS Lambda 除錯小技巧-Python","link":"2019/07/26/AWS_Serverless_05"},"next":{"title":"使用Visual Studio Code將函數部署到AWS Lambda","link":"2019/07/19/AWS_Serverless_02"},"plink":"https://chenkuansun.github.io/2019/07/24/AWS_Serverless_03/","toc":[{"id":"aws-serverless-實作上","title":"AWS Serverless 實作 — 上","index":"1","children":[{"id":"安裝","title":"安裝","index":"1.1"},{"id":"使用aws-amplify-console創建靜態頁面","title":"使用AWS Amplify Console創建靜態頁面","index":"1.2"},{"id":"使用cognito用戶身份驗證","title":"使用Cognito用戶身份驗證","index":"1.3"},{"id":"serverless後端架構","title":"Serverless後端架構","index":"1.4"},{"id":"使用amazon-api-gateway的restful-api呼叫lambda","title":"使用Amazon API Gateway的RESTful API呼叫Lambda","index":"1.5","children":[{"id":"下篇，aws-serverless-實作--下","title":"下篇，AWS Serverless 實作 — 下","index":"1.5.1"}]}]}]}