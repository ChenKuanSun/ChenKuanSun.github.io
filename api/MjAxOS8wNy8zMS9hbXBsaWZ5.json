{"title":"使用Amplify持續交付Angular專案到Serverless Web app上","date":"2019-07-30T17:46:43.000Z","date_formatted":{"ll":"Jul 31, 2019","L":"07/31/2019","MM-DD":"07-31"},"thumbnail":"cover.png","link":"2019/07/31/amplify","comments":true,"tags":["Amazon Web Services","Amplify","CodeCommit","Lambda","Serverless"],"categories":["Angular"],"updated":"2020-04-13T23:55:01.646Z","content":"<h2 id=\"前言\">前言<a href=\"#前言\" title=\"前言\"></a></h2><p>身為Angular開發工程師，開發過程中總有需要部署到伺服器上測試的時候，因此在開發專案的過程中，可以做到自動化部署到開發環境測試，並進一步到<strong>測試、產品週期</strong>流程，也是必備技能之一。</p>\n<p>而現在三大雲端商都開始實踐新的概念， Agile、CI、CD、DevOps、Scrum、TDD 等名詞，說實在的，對於筆者接觸前端框架不到半年及沒有進大公司被蹂躪過的新人來說，根本摸不清楚，但筆者就是懶人(減少不必要的SFTP複製貼上，一個一個檢查等閒雜時間)，對於筆者來說，AWS推出的Amplify後端整合及無伺服器框架無異是一個很棒的懶人包(?)</p>\n<h2 id=\"amplify-本身支援後端整合的服務\">Amplify 本身支援後端整合的服務<a href=\"#amplify-本身支援後端整合的服務\" title=\"Amplify 本身支援後端整合的服務\"></a></h2><ul><li>分析工具 - AWS Pinpoint</li>\n<li>API後端 - API Gateway和Lambda</li>\n<li>直接存取S3 - S3, CloudFront</li>\n<li>數據存儲 - DynamoDB</li>\n<li>身份驗證 - Cognito</li>\n<li>推送通知 - AWS Pinpoint</li>\n<li>GraphQL - AppSync</li>\n</ul><p>這些整合的服務除非有意願把整個專案架構都部署在AWS上(請洽AWS官方架構師)，<br>不然還是建議一步一步根據專案來串接，因為很多服務需要在專案上做優化處理，<br>不然會有高費率的問題。</p>\n<p>這篇文章主要講解最簡易的開始，把現成的Angular專案放到Amplify上，並開始使用自動化部署流程。</p>\n<h2 id=\"準備\">準備<a href=\"#準備\" title=\"準備\"></a></h2><p>專案要持續交付的前提是你的專案必須有版控工具，如Github、Bitbucket、GitLab等常見的Git工具。<br>如果只是單純想用他們的服務架設，就直接上傳就可以了。</p>\n<p>今天創建一個簡單的Angular APP ，就用大家熟知的Hello World!</p>\n<p>其實單純部署流程其實很簡單：</p>\n<ol><li>專案放到Git上</li>\n<li>連接到Amplify</li>\n<li>設定好構建流程</li>\n<li>根據需求設定Domain、Hook<br>後面會分章節詳細介紹後端整合的流程</li>\n</ol><h2 id=\"1-專案放到git上\">1. 專案放到Git上<a href=\"#1-專案放到git上\" title=\"1. 專案放到Git上\"></a></h2><p>這邊示範用AWS他們家的Codecommit</p>\n<p>建立流程是</p>\n<ol><li>建立儲存庫。</li>\n<li>建立IAM使用者連線帳密(或SSH金鑰)。</li>\n<li>上傳專案。</li>\n</ol><p>我們先到AWS上建立一個儲存庫，到控制台尋找CodeCommit，點選建立儲存庫</p>\n<p>建立好之後會提示你</p>\n<figure class=\"highlight plain\"><figcaption><span>Text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用根帳戶登入。您不能對根帳戶設定 SSH 連線，且不建議對根帳戶設定 HTTPS 連線。請考慮以 IAM 使用者身分登入，然後設定您的連線。</span><br></pre></td></tr></table></figure><p>設定遠端連線一般來說Git常見的有兩種方式，HTTPS及SSH金鑰，而為了簡單起見，我們使用一般常用的HTTPS來做存取。</p>\n<p>到右上角點選安全登入資料來準備建立IAM使用者登入帳密。</p>\n<p>然後點選使用者(如果是用AWS CLI請去 <strong>存取金鑰 (存取金鑰 ID 和私密存取金鑰)</strong> 設定)</p>\n<p>接下來創立要連到儲存庫的使用者，如果有多人的話就可以多建立幾個，務必勾選<strong>程式設計方式存取</strong> ，如果有要讓使用者用Console介面登入的話才勾選下面的 <strong>AWS Management Console 存取</strong></p>\n<p>通常建議在工作環境中根據權限建立群組來做統一管理，但因為這邊是本人自己使用的帳號， 選擇最大管理員權限，輸入群組名字。</p>\n<p>完成之後建議點選下載帳密，妥善保存在隔離環境。建立完使用者之後進到使用者裡面進行Codecommit遠端連結的設定。</p>\n<p>根據個人喜好選擇連線方式，我們此範例用簡單的HTTPS，然後把帳號密碼記下來，接下來就是使用我們常用的VSCode工具準備上傳我們的專案。</p>\n<p>先到儲存庫首頁點選複製HTTPS，接下來會自動複製到剪貼簿。</p>\n<p>到VSCode裡設定遠端儲存庫。</p>\n<p><strong>必須要有AWS Credential Helper 才找得到儲存庫唷</strong><br>沒裝的人可以看我上一篇的Serverless文章或直接搜尋我的部落格。<br>裝好<a href=\"https://docs.aws.amazon.com/cli/latest/userguide/install-windows.html#awscli-install-windows-path\" target=\"_blank\">AWS CLI</a>之後請輸入以下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local credential.helper \"!aws.cmd codecommit credential-helper $@\"</span><br><span class=\"line\">git config --local credential.UseHttpPath true</span><br></pre></td></tr></table></figure><p>已經安裝好的人直接PUSH上去</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m \"first commit\"</span><br><span class=\"line\">git remote add origin https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/angular-web-app</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure><p>接著上傳(帳號密碼就輸入剛剛IAM使用者創立的帳密)</p>\n<p> 完成之後可以看到CodeCommit已經有了專案。</p>\n<h2 id=\"2-連接到amplify\">2. 連接到Amplify<a href=\"#2-連接到amplify\" title=\"2. 連接到Amplify\"></a></h2><p>建立Amplify流程是</p>\n<ol><li>連接儲存庫。</li>\n<li>設定自動化部署腳本及監看分支類別。</li>\n<li>開始部署。</li>\n</ol><p>到Amplify之後點選我們需要使用的儲存庫，如果是用其他儲存庫的話，確保你有該儲存庫管理員權限。這邊我們就選擇CodeCommit</p>\n<p>設定好之後，選擇我們的儲存庫跟要發行部署的分支。</p>\n<p>接下來選擇APP名稱，接下來是最重要的部署腳本<br>基本上範本是這樣(YAML格式)：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">frontend:</span></span><br><span class=\"line\">  <span class=\"attr\">phases:</span></span><br><span class=\"line\">    <span class=\"attr\">preBuild:</span></span><br><span class=\"line\">      <span class=\"attr\">commands:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">ci</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">commands:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">baseDirectory:</span> <span class=\"string\">dist/Angular-Web-App</span></span><br><span class=\"line\">    <span class=\"attr\">files:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'**/*'</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">node_modules/**/*</span></span><br></pre></td></tr></table></figure><p>版本就是部署腳本的版本，其中Amplify部署過程中分三大部份:</p>\n<ol><li>env</li>\n<li>backend</li>\n<li>frontend</li>\n</ol><p>env代表部署過程中的環境變數，backend是配合後端整合的amplify cli來設定Lambda、GraphQL等無伺服器後端服務。<br>另外每部分可以設定run-as，如果有自行上傳的Docker Image的話可以自行設定。<br>而我們單純只是部署前端的話只要保留frontend的部分就行了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">phases:</span></span><br><span class=\"line\">    <span class=\"attr\">preBuild:</span></span><br><span class=\"line\">        <span class=\"attr\">commands:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">ci</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">        <span class=\"attr\">commands:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br></pre></td></tr></table></figure><p>在各部分還分為phases、artifacts、cache，</p>\n<h3 id=\"phases\">phases<a href=\"#phases\" title=\"phases\"></a></h3><p>這部分就是我們常用的構建指令<br>細分preBuild, build, 額外有postBuild, install(自訂Docker可以使用)<br>強烈建議分多部分，因為除錯的時候會比較清楚卡在哪一個方向，盡量不要全塞在build裡。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">run-as:</span> <span class=\"string\">Linux-user-name</span></span><br><span class=\"line\"><span class=\"attr\">commands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">command</span></span><br><span class=\"line\"><span class=\"attr\">finally:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">command</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">command</span></span><br></pre></td></tr></table></figure><p>內含三個基本指令，用什麼身分跑，command指令，跟完成之後的command。<br>都是根據專案需求來設定。</p>\n<h4 id=\"prebuild\">preBuild<a href=\"#prebuild\" title=\"preBuild\"></a></h4><p>其實就是在構建前要做的事情，通常在Angular專案在構建前都會npm i來取得所有package.json內定義的依賴項，而在自動化部署方面，npm提供了<a href=\"https://docs.npmjs.com/cli/ci.html\" target=\"_blank\">npm ci的指令</a>來執行自動化安裝流程，如果有一些私人的第三方套件需要安裝的話可以使用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">commands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">config</span> <span class=\"string\">set</span> <span class=\"string\">&lt;key&gt;</span> <span class=\"string\">&lt;value&gt;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">config</span> <span class=\"string\">set</span> <span class=\"string\">registry</span> <span class=\"string\">https://registry.npmjs.org</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">config</span> <span class=\"string\">set</span> <span class=\"string\">always-auth</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">config</span> <span class=\"string\">set</span> <span class=\"string\">email</span> <span class=\"string\">hello@amplifyapp.com</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">yarn</span> <span class=\"string\">install</span></span><br></pre></td></tr></table></figure><p>也可以安裝需要的系統套件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">commands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">yum</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">&lt;package&gt;</span></span><br></pre></td></tr></table></figure><h4 id=\"build\">build<a href=\"#build\" title=\"build\"></a></h4><p>其實就是我們Angular常見的build指令，如果有個人需求可以設定base-href等不一樣的設定</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng build --prod --base-href /</span><br></pre></td></tr></table></figure><p>我個人都直接npm build懶人包，或是在package.json裡設定好json裡設定好prodToAmplify的腳本<br>在裡面直接跑npm run prodToAmplify。</p>\n<h4 id=\"postbuild\">postBuild<a href=\"#postbuild\" title=\"postBuild\"></a></h4><p>就是跑完之後要做的事情。<br>因為這專案沒有什麼需要跑完之後要做的事，有些人可能會想要跑完之後把S3的資源Copy到這邊的dist資料夾裡，就自行設定為主。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- echo Entered the post_build phase...</span><br><span class=\"line\">- echo Build completed on `date`</span><br></pre></td></tr></table></figure><p>以上是Build過程<br>盡量在前後加上echo讓log檔更漂亮</p>\n<h3 id=\"artifacts\">artifacts<a href=\"#artifacts\" title=\"artifacts\"></a></h3><p>build結束之後要設定搬移到部署伺服器上的東西<br>通常baseDirectory會對應到angular.json裡的”outputPath”，表示這邊的資料夾內容都是要部署到伺服器的檔案，而有可能有些資料沒有要公開的可以在files中而外排除該資料夾。預設都是*<em>/</em>來把內容所有的資料部署上去。</p>\n<h3 id=\"cache\">cache<a href=\"#cache\" title=\"cache\"></a></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span> <span class=\"string\">node_modules/**/*</span></span><br></pre></td></tr></table></figure><p>代表部署過程中的快取資料，放在這邊的東西會被快取到S3上做存放，通常會把node_modules放進來，之後構建速度會快很多，少了下載這步。</p>\n<p>下面有進階設定可以選擇自己上傳的Docker image跟設定環境變數，我們這次保留直接部署。</p>\n<p>完成之後可以看到開始構建，左邊有面板可以設定自己的Domain、Email notification、Rewrites and redirects。<br>Angular如果不是在根目錄下需要重新導向的話如–base-href為/hello/就要在Rewrites and redirects裡設定redirects到/hello/index.html</p>\n<p>完成之後左邊會有預覽圖，流程圖的按鈕可以點進去檢查輸出日誌，如果有錯誤也會顯示。</p>\n<p>點了預覽圖下面的網址就會直接到網站上瀏覽，也有內建SSL</p>\n<p>點選Verify的話可以看到不同裝置上呈現的效果<br>上面也有構建中的詳細資料，可以知道我們構建了3分鐘，<br>接下來只要提交到master就會<strong>直接自動構建</strong>，</p>\n<p>當然要分開環境的話可以點選右上角的ConnectBranch來連結開發分支跟測試分支，一次開三個不同部署的網站來做工作流程。</p>\n<p>今天初步講解直接將現有專案搬上自動化流程，但這只是無伺服器後端服務的開始，後面幾個章節會來講解用Angular-amplify的整合後端來作完整的無伺服器網站APP。</p>\n<p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","next":{"title":"AWS Serverless 實作 — 下","link":"2019/07/26/AWS_Serverless_04"},"plink":"https://chenkuansun.github.io/2019/07/31/amplify/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"amplify-本身支援後端整合的服務","title":"Amplify 本身支援後端整合的服務","index":"2"},{"id":"準備","title":"準備","index":"3"},{"id":"1-專案放到git上","title":"1. 專案放到Git上","index":"4"},{"id":"2-連接到amplify","title":"2. 連接到Amplify","index":"5","children":[{"id":"phases","title":"phases","index":"5.1"},{"id":"artifacts","title":"artifacts","index":"5.2"},{"id":"cache","title":"cache","index":"5.3"}]}]}