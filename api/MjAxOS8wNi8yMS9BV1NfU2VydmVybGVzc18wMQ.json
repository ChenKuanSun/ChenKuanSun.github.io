{"title":"使用PyCharm將函數部署到AWS Lambda","date":"2019-06-20T18:46:25.000Z","date_formatted":{"ll":"Jun 21, 2019","L":"06/21/2019","MM-DD":"06-21"},"thumbnail":"https://cdn-images-1.medium.com/max/2532/1*UVYAT7_mtodK07lhNti30Q.png","link":"2019/06/21/AWS_Serverless_01","comments":true,"tags":["Amazon Web Services","Lambda","Pycharm","Serverless"],"categories":["Amazon Web Services"],"updated":"2020-04-13T23:55:01.572Z","content":"<p>自從Amazon在2014年率先揭開Serverless運算架構的新革命後，無伺服器架構越來越火紅，但是台灣卻很少有人討論相關技術，我試用了Cloud Function(GCP)，也在專案上導入了AWS Lambda，也吸收了不少經驗，因此也來寫一些系列文章來講解各大無伺服器架構的開發體驗過程。</p>\n<h2 id=\"環境設定：\">環境設定：<a href=\"#環境設定：\" title=\"環境設定：\"></a></h2><p>首先文章會分幾個部分，事前的環境準備需要：</p>\n<ol><li><p>Docker</p>\n</li>\n<li><p>Python3</p>\n</li>\n<li><p>Pycharm</p>\n</li>\n</ol><p>如果不知道電腦本地裡安裝的Python版本的話可以考慮在Command裡輸入下列指令查看版本：</p>\n<pre><code>python -V</code></pre><p>接下來安裝AWS-SAM-CLI（務必弄清楚pip安裝後會是在預設的python環境下）：</p>\n<pre><code>pip install --user aws-sam-cli</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/2532/1*F6slQbATZCFGSSY9yyLrmQ.png\" class=\"φcy\"></p>\n<p>接下來打開Pycharm， 點選Configure&gt;Preferences，到Plugins，點選Marketplace，在搜尋欄打入AWS：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4044/1*bstqEapPKprdwmMj6HVabw.png\" class=\"φcy\"></p>\n<p>點選AWS Tookit安裝，安裝完成後，點選OK，接下來創建新的專案：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3556/1*5_DPYBCUYrEH9h0gYHVJ0w.png\" class=\"φcy\"></p>\n<p>會看到AWS Serverless Application的選項，這時候點選創建新環境，然後Base指向剛剛AWS-SAM-CLI安裝的Python環境之中，Template點選Hello World範本。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/6088/1*lONJqHm_3fD3YkQxAUa0vQ.png\" class=\"φcy\"></p>\n<p>接下來創建完成後，打開專案，點選app.py，就會看到基本的Hello World範本，我們需要做一點AWS環境設定，點選右下角的AWS Credential。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2232/1*Cj0-1lYtrVISsiZX-skN6A.png\" class=\"φcy\"></p>\n<p>先點選要開啟Serverless環境的區域，這邊筆者選擇SG，大家可以試試最近AWS新部署的HongKong區域，點選完之後還要輸入AWS ACCESS KEY才可以遠端部署到AWS伺服器上，先到AWS上打開Console面板</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*32jfSIpnnODotCsGJb-h4A.png\" class=\"φcy\"></p>\n<p>點選安全登入資料</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5760/1*WLEFhViCRWV32LzCYQM7ow.png\" class=\"φcy\"></p>\n<p>然後打開存取金曜，獲得一組ID跟KEY</p>\n<pre><code># aws_access_key_id = [accessKey1]\n# aws_secret_access_key = [secretKey1]</code></pre><p>到剛剛Pycharm右下角點選Edit AWS Credential files編輯認證檔案，下面有一組profile user1，取消Comment之後把ID跟KEY貼上去，如果有多組就可以自定義名稱相同方式寫入。</p>\n<h2 id=\"運行本地測試環境：\">運行本地測試環境：<a href=\"#運行本地測試環境：\" title=\"運行本地測試環境：\"></a></h2><p><img src=\"https://cdn-images-1.medium.com/max/3300/1*7u81yxLCi7hVBfP3UZixGw.png\" class=\"φcy\"></p>\n<p>回到剛剛的檔案，會發現在Function前面有個Lambda符號，點選他的話，就會出現Run的選項，第一次點選Run會提示你選擇運行選項：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2404/1*YSRopRCbgK0ycNQcvlPesw.png\" class=\"φcy\"></p>\n<p>確認好運行環境是預設想要的Python版本，Handler指向你的Function(飯粒是app.lambda_handler)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2416/1*3SxdtN2IC898JP1uq01oGw.png\" class=\"φcy\"></p>\n<p>Input的部分選擇會用到Lambda的服務，我們這邊選擇API Gateway代理服務，選擇好之後點選Run</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2980/1*mpXIU_w37l0sPyGyOJAiaQ.png\" class=\"φcy\"></p>\n<p>第一次運行的話會下載AWS Lambda Docker Image在本機建立容器，會需要一段時間，通常Image後面會很多……………….，完成建立容易之後開始執行就會出我們範例程式碼的HelloWorld，由於這個Lambda概念是Serverless，所以範例程式就是大家熟知的Response Status Code 200的回應。</p>\n<h2 id=\"部署：\">部署：<a href=\"#部署：\" title=\"部署：\"></a></h2><p><img src=\"https://cdn-images-1.medium.com/max/2504/1*Dx3KdPUt7WYhgNa6nxVklg.png\" class=\"φcy\"></p>\n<p>在Project點選右鍵，在選單最下面會有Deploy Serverless Application的選項，一樣點選之後，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2800/1*RRxZiyusVEu6IeO-Bt1Cug.png\" class=\"φcy\"></p>\n<p>由於Lambda遠端部署是將檔案等等放到S3上，再委託由CloudFormation部署到Lambda中，如果沒有既定的服務就直接創建新的，開始部署之後，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3168/1*Ko6liH1V92NvyqkqjTMLig.png\" class=\"φcy\"></p>\n<p>會看到打包上傳的過程，有些人可能會遇到找不到[‘aws’]指令的問題，是因為在打包過程中找不到SAM AWS指令，必須在Base環境中正確安裝AWS-SAM-CLI才可以繼續運行，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2856/1*qLLhdo3pCh9LJREllqTZXQ.png\" class=\"φcy\"></p>\n<p>上傳成功之後，會打開CloudFormation的工作視窗，這邊會監控所有服務的部署狀況，如果有寫好的部署腳本的話，就會根據部署腳本顯示各任務狀況，這邊等到所有服務完成之後，我們到AWS檢查各服務部署狀況，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5548/1*oWX8M0845dJra_51m2Knvw.png\" class=\"φcy\"></p>\n<p>可以發現剛剛部署上去的Function已經在Lambda，記得選對區域，不然會看不到自己的Function。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5320/1*osjKxIBjcn0aujDvEEpDtQ.png\" class=\"φcy\"></p>\n<p>Lambda部署的時候已經幫我們選擇好API Gateway，跟前面的範本輸入選擇有關。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4856/1*dXoo3_8JV_ZQRJXZ-vy4kA.png\" class=\"φcy\"></p>\n<p>可以在線上編輯器看到剛剛部署的檔案內容。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2864/1*KbGC1OeO5PWlX0q7x3TLXw.png\" class=\"φcy\"></p>\n<p>可以根據需求設定測試樣板，如果是設定POST，PUT的話可以根據函數內容做變化。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3500/1*CVm6lav01bp1Q4ZbPzHBwQ.png\" class=\"φcy\"></p>\n<p>接下來在API Gateway可以看到部署好的Stack。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5752/1*s9JcX0m86F-O52OTqS8wyw.png\" class=\"φcy\"></p>\n<p>進到裡面可以看到剛剛部署的API Gateway Proxy，請求指向Lambda。可以點選測試。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5752/1*YVU1yVZeikFUB58c06_UzQ.png\" class=\"φcy\"></p>\n<p>點選測試，會看到右邊的回應內文跟日誌，如果跟預期的內容一樣的話就代表成功，但不一定是真實回應內容，從筆者實際經驗可以發現，從API Gateway做CORS出來的時候，必須也要在Lambda的Header裡同步加入。</p>\n<h2 id=\"結語：\">結語：<a href=\"#結語：\" title=\"結語：\"></a></h2><p>現在無伺服器架構越來越火紅，以前的後端工程師可能都需要維護伺服器等等人家說MIS要做的事情，現在部署到雲端，又有Serverless架構，基本上實體的伺服器已經慢慢的被淘汰。除了機敏資料備份以外，無伺服器架構在開發過程中大大減少了全端工程師在整備環境的時間跟精力，只要專注於業務邏輯，在雲端中自動部署，整合好SQL，Lambda function，API Gateway，就可以免去大多數部署環境的時間，加上內部安全性基本都由雲端服務商專門的團隊處理，相信大家都很願意把硬體設備等等投資在雲端上，但最後還是要提醒一句，如果是高運算、長時間待機需求，建議是直接租用EC2會比較划算，無伺服器架構還有一個大缺點，Cold-Start，筆者團隊有試著繞過VPS啟動的步驟，減少了2/3的啟動時間，但安全及穩定性上有所取捨，有機會針對減少冷啟動時間來寫一篇文章，</p>\n<p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","prev":{"title":"Unity Obstacle Tower 第一章：介紹","link":"2019/06/23/RL_02"},"next":{"title":"LIFF 與 Angular 共舞 — 實作 — 02","link":"2019/06/17/LIFF_02"},"plink":"https://chenkuansun.github.io/2019/06/21/AWS_Serverless_01/","toc":[{"id":"環境設定：","title":"環境設定：","index":"1"},{"id":"運行本地測試環境：","title":"運行本地測試環境：","index":"2"},{"id":"部署：","title":"部署：","index":"3"},{"id":"結語：","title":"結語：","index":"4"}]}