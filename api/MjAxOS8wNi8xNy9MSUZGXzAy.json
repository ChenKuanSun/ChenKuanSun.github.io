{"title":"LIFF 與 Angular 共舞 — 實作 — 02","date":"2019-06-16T18:46:25.000Z","date_formatted":{"ll":"Jun 17, 2019","L":"06/17/2019","MM-DD":"06-17"},"thumbnail":"https://cdn-images-1.medium.com/max/2000/1*njRRts36H6DKD1gDh_H3NA.png","link":"2019/06/17/LIFF_02","comments":true,"tags":["Angular","LIFF","LINE","OCR"],"categories":["LINE Developer"],"updated":"2020-04-13T23:55:01.576Z","content":"<p>由於上一次只教大家用基本功能來取得使用者資料，這次來練習做一點回家功課，文字辨識。</p>\n<img src=\"https://cdn-images-1.medium.com/max/2000/1*njRRts36H6DKD1gDh_H3NA.png\" style=\"max-width: 100%;\"><p>LIFF 全名是 <strong>LINE Front-end Framework，是用來打造一些在LINE聊天室內打開的Web App平台。由於我在生活中常常要傳一些資料給朋友，都要照著資料打實在是懶惰，科技來自於惰性，我就想要來開發看看文字辨識，並可以使用傳送文字到聊天室的功能來讓大家熟悉一下LIFF的功能。</strong></p>\n<h2 id=\"實作：\">實作：<a href=\"#實作：\" title=\"實作：\"></a></h2><p><strong>這邊假設大家都已經遵循我<a href=\"https://medium.com/@fgriasa123/liff-%E8%88%87-angular-%E5%85%B1%E8%88%9E-%E5%AF%A6%E4%BD%9C-a48178bb362f\" target=\"_blank\">上一篇文章</a>，都設定好基本環境狀況下開始。</strong></p>\n<img src=\"https://cdn-images-1.medium.com/max/2000/1*lHxSb9Xg9EIMzwMnGv63nA.png\" style=\"max-width: 100%;\"><p>這邊介紹一下我們將要串進來的套件：<a href=\"https://tesseract.projectnaptha.com/\" target=\"_blank\">**Tesseract.js</a>，它是由著名的OCR引擎<a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\">**Tesseract OCR engine</a>所接出來的ECMAScript套件（我怕被告不想用商標～），不知道Tesseract的人可以去查查他的淵源，總而言之他已經被Google收養了，也接入了LSTM的機器學習等技術，是一個強大的OCR引擎，甚至有些人拿它來破解驗證碼。</p>\n<p>我們要使用Tesseract的話建議用npm install 安裝(感謝<a href=\"https://github.com/urakozz\" target=\"_blank\">urakozz</a>幫大家打包好易用的TS檔）</p>\n<pre><code>npm i -S tesseract.ts tesseract.js</code></pre><p>接下來就到要使用的AppComponent.ts內加入引用</p>\n<pre><code>import { Tesseract } from &quot;tesseract.ts&quot;;</code></pre><img src=\"https://cdn-images-1.medium.com/max/2000/1*aL2CW1n-ZNDO4vSgYGve1A.png\" style=\"max-width: 100%;\"><p>由於我們是要做在LIFF裡面所以我們需要初始化LIFF，打入liff直接點選init，就會自動填入初始化的init。</p>\n<p>因為我們需要使用者拍照或上傳圖片來做辨識的動作，所以我們在Template內加入input，並綁定他上傳完圖片需要呼叫的事件。</p>\n<pre><code>&lt;input type=&quot;file&quot; accept=&quot;image/*&quot; capture=&quot;camera&quot; (change)=&quot;uploadImage($event)&quot;&gt;</code></pre><img src=\"https://cdn-images-1.medium.com/max/2000/1*zk7XHUvD-T2il3UmCbQbyw.png\" style=\"max-width: 100%;\"><p>改掉範例的程式會長這樣，</p>\n<ol><li><p>status是目前整個辨識狀態</p>\n</li>\n<li><p>progress是辨識的進度</p>\n</li>\n<li><p>message是辨識完之後將結果填入的部分</p>\n</li>\n</ol><p>接下來我們要呼叫Tes的API</p>\n<pre><code>Tesseract.recognize(img,&apos;eng&apos;)\n\n    .progress((p) =&gt; {\n\n        this.status = p.status;\n\n        this.progress = p.progress * 100;\n\n    })\n\n    .then((res: any) =&gt; {\n\n        console.log(res);\n\n        this.message += res.text;\n\n    })\n\n    .catch((e) =&gt; { this.message += e.message; });</code></pre><p>其中 img的部分是我們要傳入的圖片，eng是要辨識的文字，API是根據<a href=\"http://www.loc.gov/standards/iso639-2/php/code_list.php\" target=\"_blank\">ISO 639–2</a> 的規格去訂語言的，繁體中文是chi_tra，目前我們先從簡單的英文開始（雙語言的部分似乎有些BUG所以先不在這裡實作。）。接下來我們來測試一輪，打入npm start</p>\n<img src=\"https://cdn-images-1.medium.com/max/2040/1*XhhNSBJZLOiL_e2qgmafXg.png\" style=\"max-width: 100%;\"><p>接下來上傳一張圖片來測試，就直接上傳上面這張截圖</p>\n<img src=\"https://cdn-images-1.medium.com/max/4432/1*_O3DnXkbb-5RDiYPPUxJCA.png\" style=\"max-width: 100%;\"><p>可以發現除了非英文的部分以外，辨識能力極高，</p>\n<img src=\"https://cdn-images-1.medium.com/max/4606/1*smhia34XqvDMazE7cVWdPg.png\" style=\"max-width: 100%;\"><p>當然也加入了中文(chi_tra)來測試，不過辨識能力似乎普普，但至少看起來能用就好。我們接著來使用傳入聊天室的功能。</p>\n<img src=\"https://cdn-images-1.medium.com/max/2000/1*38HOTR3cvWSHqKm8jHUVbA.png\" style=\"max-width: 100%;\"><p>加入確認按鈕，如果想要掃完不確認就直接傳的話可以直接在API裡實作就好。</p>\n<img src=\"https://cdn-images-1.medium.com/max/2264/1*jXpXK3N2PZ85A1WzDhz9uQ.png\" style=\"max-width: 100%;\"><p>接下來打入liff就會有sendMessages的建議，直接選擇。</p>\n<img src=\"https://cdn-images-1.medium.com/max/2000/1*Y7BrbqTOqCmM0OvpnlchqA.png\" style=\"max-width: 100%;\"><p>我會假設使用者傳完就要回去繼續聊天等等，就直接幫他關閉這個LIFF視窗，如果想要讓使用者自己關閉的話就不用加入closeWindow那段。直接npm build專案部署到LIFF測試效果（不知道怎麼部署可以參考我<a href=\"https://medium.com/@fgriasa123/liff-%E8%88%87-angular-%E5%85%B1%E8%88%9E-%E5%AF%A6%E4%BD%9C-a48178bb362f\" target=\"_blank\">上一篇文章</a>）</p>\n<img src=\"https://cdn-images-1.medium.com/max/2250/1*XeN2jybRLAUHlM7IiEk5kg.png\" style=\"max-width: 100%;\"><img src=\"https://cdn-images-1.medium.com/max/2250/1*rGpbpRjyvWMcuRtVs5Eshg.png\" style=\"max-width: 100%;\"><img src=\"https://cdn-images-1.medium.com/max/2250/1*TpgR7ZC9f_79PI9A29Oe3Q.png\" style=\"max-width: 100%;\"><p>隨手拿手邊的書直接拍，然後測試英文的效果（請忽略沒有CSS排版），如果可以結合雙語言的話應該就不太會有亂碼的情況發生。接下來點送出讓他幫我們傳入聊天室。</p>\n<img src=\"https://cdn-images-1.medium.com/max/2250/1*FUHvpc7BjFAkMWtIXckqvQ.png\" style=\"max-width: 100%;\"><p>傳入聊天室很意外的發現，他有幫我們做一些排版的動作，而且原圖是順時針90度，沒有被影響到。既然都了解可以幫我們排行列的話，可以考慮做依據換行做split的動作傳入Array裡面做出選項，讓使用者點選想傳出的訊息之後再按送出鍵的進一步應用。</p>\n<p>補充：中文的辨識度還很差，可能要另外導入模型才行。</p>\n<h3 id=\"stackblitz範例連結直接抄程式碼，因為ocr-ts套件沒法在上面用的樣子）\">Stackblitz範例連結(直接抄程式碼，因為OCR TS套件沒法在上面用的樣子）<a href=\"#stackblitz範例連結直接抄程式碼，因為ocr-ts套件沒法在上面用的樣子）\" title=\"Stackblitz範例連結(直接抄程式碼，因為OCR TS套件沒法在上面用的樣子）\"></a></h3><p><a href=\"https://stackblitz.com/edit/angular-liff-demo-ocr?embed=1&file=src/app/app.component.ts\" target=\"_blank\"><strong>angular-liff-demo-ocr - StackBlitz</strong><br><em>Starter project for Angular apps that exports to the Angular CLI</em>stackblitz.com</a></p>\n<p>LIFF可以結合很多LINE沒有內建的功能，打造出更生動的SPA來跟使用者互動，不過這次雖然結合OCR引擎，但實際上還是調用OCR API的方式，所以在下載訓練過的辨識模型跟辨識過程都會需要花時間，建議想做到整合型的APP應該要將Tesseract Open Source OCR Engine包在整個SPA內，並直接導入雙語言來讓使用者可以更快速的掃描出想要的文字內容並利用LIFF的SendMessage ＡAPI來傳進去LINE內，節省更多打字的時間。如果我有想到更多應用的話，敬請期待嚕～</p>\n<p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","prev":{"title":"使用PyCharm將函數部署到AWS Lambda","link":"2019/06/21/AWS_Serverless_01"},"next":{"title":"AWS Deepracer RL競賽實戰心得分享","link":"2019/06/13/AWS_DeepRacer"},"plink":"https://chenkuansun.github.io/2019/06/17/LIFF_02/","toc":[{"id":"實作：","title":"實作：","index":"1","children":[{"id":"stackblitz範例連結直接抄程式碼，因為ocr-ts套件沒法在上面用的樣子）","title":"Stackblitz範例連結(直接抄程式碼，因為OCR TS套件沒法在上面用的樣子）","index":"1.1"}]}]}