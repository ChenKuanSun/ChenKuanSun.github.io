{"title":"使用Visual Studio Code將函數部署到AWS Lambda","date":"2019-07-18T18:46:25.000Z","date_formatted":{"ll":"Jul 19, 2019","L":"07/19/2019","MM-DD":"07-19"},"thumbnail":"https://cdn-images-1.medium.com/max/2532/1*UVYAT7_mtodK07lhNti30Q.png","link":"2019/07/19/AWS_Serverless_02","comments":true,"tags":["Amazon Web Services","Lambda","Serverless","Visual Studio Code"],"categories":["Amazon Web Services"],"updated":"2020-04-13T23:55:01.572Z","content":"<p>這篇文章延續<a href=\"https://medium.com/@fgriasa123/%E4%BD%BF%E7%94%A8pycharm%E5%B0%87%E5%87%BD%E6%95%B8%E9%83%A8%E7%BD%B2%E5%88%B0aws-lambda-aa6835d39b93\" target=\"_blank\">使用PyCharm將函數部署到AWS Lambda</a>，因為自己有使用Angular，有需要利用Visual Studio Code環境需求，而剛好在7月15日時AWS推出了VSCode擴充套件，因此特地學習之後來撰寫相關教學。</p>\n<h2 id=\"環境設定：\">環境設定：<a href=\"#環境設定：\" title=\"環境設定：\"></a></h2><p>首先文章會分幾個部分，事前的環境準備需要：</p>\n<ol><li><p>Docker</p>\n</li>\n<li><p>Python3</p>\n</li>\n<li><p>Visual Studio Code</p>\n</li>\n</ol><p>如果不知道電腦本地裡安裝的Python版本的話可以考慮在Command裡輸入下列指令查看版本：</p>\n<pre><code>python -V</code></pre><p>接下來打開VSCode， 點選擴充套件，搜尋AWS：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5636/1*xtJb4XeHR6ZBeiOYzm5c9w.png\" class=\"φcy\" alt=\"AWS Tookit\"><em>AWS Tookit</em></p>\n<p>點選安裝，如果有像筆者一樣有同時用VSCode開發很多種語言的話，記得先將不會用到的套件都關一遍，獨立給Python一個工作區。</p>\n<p>因為要遠端存取AWS資源，我們必須先設定好API金鑰，到AWS上打開Console面板</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*q1YQRfozySY3kHRP.png\" class=\"φcy\"></p>\n<p>點選安全登入資料</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2800/0*lJWGpACCW3CxMq7a.png\" class=\"φcy\" alt=\"console\"><em>console</em></p>\n<p>然後打開存取金鑰，獲得一組ID跟KEY</p>\n<pre><code># aws_access_key_id = [accessKey1]\n# aws_secret_access_key = [secretKey1]</code></pre><p>然後在VSCode點選Ctrl+Shift+P(OSX請用Command+Shift+P)開啟進階命令列，輸入AWS</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2844/1*9fs94mVFutpEtGVEbr3k5A.png\" class=\"φcy\"></p>\n<p>會發現AWS Tookit已經包含各種設定，我們點選Create Credentials Profile<br>來輸入剛剛的金鑰，由於筆者已經用Pycharm及SAM Cli創建過金鑰檔案，所以會直接開啟舊檔，一般來說會直接提示使用者輸入檔案名稱，然後輸入Key。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3648/1*tbL7qWM7wwGFkpIXCLMhMQ.png\" class=\"φcy\" alt=\"Config\"><em>Config</em></p>\n<p>驗證剛剛的金鑰是否能正確登入AWS，開啟進階命令列，輸入AWS</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3040/1*VIVWYm0auwXOSceEXbuM4Q.png\" class=\"φcy\" alt=\"Connect to AWS\"><em>Connect to AWS</em></p>\n<p>點選Connect to AWS，會提示問你要用哪個設定檔登入，成功登入之後到AWS擴充套件的面板，可以看見需要新增到面板操作的地區選項。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4376/1*gHhGKdLxFBMI97XkQaj_pQ.png\" class=\"φcy\" alt=\"Region\"><em>Region</em></p>\n<p>由於筆者之前測試在個人帳號都是使用新加坡伺服器（台灣朋友可以使用最新的香港伺服器唷），所以選擇新加坡地區。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4376/1*3Owpcf5e8dHHehp2wOe_Pw.png\" class=\"φcy\"></p>\n<p>這時候就會看見已經部署過的專案內容，也可以加入其他地區，在進階命令列打上AWS選擇Show region in the exploer，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2120/1*LXyW4QALnBnMmUgVV46gwg.png\" class=\"φcy\"></p>\n<p>當然也可以用AWS面板上的快捷鍵來點選，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2120/1*BzhBwNpiciF0Y1hzojUPdQ.png\" class=\"φcy\"></p>\n<p>就可以看到各個區域部署的服務。</p>\n<h2 id=\"創建serverless範例專案\">創建Serverless範例專案<a href=\"#創建serverless範例專案\" title=\"創建Serverless範例專案\"></a></h2><p>要創建一連串範例專案前，必須先設定好本地開發環境，首先需要Python環境，筆者本身是用Anaconda，所以直接用Anaconda環境安裝一個自動化部署及設定SAM（ Serverless Application Model）所有指令的*<em>AWS SAM CLI<br>*</em>安裝AWS-SAM-CLI（務必弄清楚pip安裝後會是在預設的python環境下）：</p>\n<pre><code>pip install --user aws-sam-cli</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/2492/1*WZ4Isj-8E0nv4x2cKzBWyg.png\" class=\"φcy\"></p>\n<p>點選創建新的SAM程序 ，接下來會提示你使用哪種語言設定，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2488/1*ihRzdaqHJG0TMrXInF4gIw.png\" class=\"φcy\"></p>\n<p>這邊選擇你的Lambda預設語言，後續會詢問是否在當前或是其他資料夾創建專案，選擇好之後輸入名稱，等待佈建完成。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5444/1*kfckjlrysjQOg6Eae8UaHw.png\" class=\"φcy\"></p>\n<p>接下來要創建專案的環境，使用Terminal在專案根目錄下打</p>\n<pre><code>python -m venv ./.venv.</code></pre><p><img src=\"https://cdn-images-1.medium.com/max/5652/1*5EF-Y8WHaIVdCMEcjhNDZA.png\" class=\"φcy\"></p>\n<p>由於筆者的系統有Python2 3，所以會加上python3，然後系統會提示是否套用到本工作區，建議是點選Yes以免後續設定困擾</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2596/1*IBnTGKrSP9JO0a8lhlt6CQ.png\" class=\"φcy\"></p>\n<p>當然真的沒點到就點選左下角更換環境到剛剛創建的環境。接下來點選App的檔案，如Python就是App.py，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5016/1*1PikoDHHgEJ4BLeiUMxLvw.png\" class=\"φcy\"></p>\n<p>然後可以看到SAM已經幫我們創建好一個Hello World的範例專案了，要在本地建立測試環境，可以點選CodeLens的按鈕，這是VSCode的功能，可以快速建立程式。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*3Ro5v3c6zqMGBI8h9_ROzg.png\" class=\"φcy\"></p>\n<p>先點選Configure來幫我們紀錄資訊，點選之後會創建設定檔，可以根據自己狀況更改。點選Run Locally來開始本地測試。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5380/1*MmUwzkWd5kg4il7hXKPIsA.png\" class=\"φcy\"></p>\n<p>接下來就會在本地建立一個Docker伺服器並且開啟測試，可以看到我們的測試成功返回了</p>\n<pre><code>{&quot;statusCode&quot;:200,&quot;body&quot;:&quot;{\\&quot;message\\&quot;: \\&quot;hello world\\&quot;}&quot;}</code></pre><p>有些人使用Python可能會遇到下面這個問題：</p>\n<pre><code>PythonPipBuilder:None - Binary validation failed!</code></pre><p>問題原因在於，你在執行專案的環境跟選擇專案語言版本是不同的，一開始筆者選擇3.6版本，但遺忘了自己系統是3.7版本，導致出錯，這時候將創立venv環境的python版本調整成跟目標專案語言版本一樣就能解決了。<br>如果要Debug程式的話，可以下斷點，點選Debug Locally就可以進入除錯模式。</p>\n<h2 id=\"部署\">部署<a href=\"#部署\" title=\"部署\"></a></h2><p>我們要進入部署階段，目前都是用預設部署，部署之前請先到S3，在區域伺服器中創建一個Bucket供部署使用。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2516/1*TNK4PaK2mb3SYeqRr_1cPQ.png\" class=\"φcy\"></p>\n<p>點選AWS裡的Deploy或是到進階命令列裡輸入AWS點選就可以開始部署過程，會先提示選擇部署描述文件（template.yaml），然後輸入剛剛在S3創建的Bucket名稱：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3908/1*Ui7Vvkvj6pX0-gOzQAgexg.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4172/1*BD2cAufoV4cTCoSvgfQCOg.png\" class=\"φcy\"></p>\n<p>完成之後會開始部署，部署會根據CloudFormation的腳本去部署，如果沒有就會以範本創建新的（S3沒有並不會創建，應該是Toolkit的Bug，因為Pycharm版本會自動創建），這邊等到所有服務完成之後，我們到AWS檢查各服務部署狀況，</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4588/1*v8W1ry9NZYm3TzTkWrfqGg.png\" class=\"φcy\"></p>\n<p>可以發現剛剛部署上去的Function已經在Lambda，記得選對區域，不然會看不到自己的Function。Lambda部署的時候已經幫我們選擇好API Gateway，跟前面的範本輸入選擇有關。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4928/1*apR2h2-Ajd0VyDm1LzOS9w.png\" class=\"φcy\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5048/1*ETpi4XQ8uvw6tWQGCrdfcg.png\" class=\"φcy\"></p>\n<p>可以在線上編輯器看到剛剛部署的檔案內容。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2800/0*YghMS_-Lf5u4ehJu.png\" class=\"φcy\"></p>\n<p>可以根據需求設定測試樣板，如果是設定POST，PUT的話可以根據函數內容做變化。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2500/1*P3JbMogk6BRbhwkKHn26aQ.png\" class=\"φcy\"></p>\n<p>接下來在API Gateway可以看到部署好的Stack。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/5444/1*TxY96ioG0d096-m_F5M3FA.png\" class=\"φcy\"></p>\n<p>進到裡面可以看到剛剛部署的API Gateway Proxy，請求指向Lambda。可以點選測試。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3796/1*qKwXb4xy-z1FTszYEUVnXQ.png\" class=\"φcy\"></p>\n<p>點選測試，會看到右邊的回應內文跟日誌，如果跟預期的內容一樣的話就代表成功，但不一定是真實回應內容 ，這是端對端測試的實務經驗，不多做詳解。</p>\n<h2 id=\"結語：\">結語：<a href=\"#結語：\" title=\"結語：\"></a></h2><p>現在無伺服器架構越來越火紅，只要專注於業務邏輯，在雲端中自動部署，就可以免去大多數部署環境的時間，而AWS在Serverless這塊也是很早就戰略部署，隨著VSCode越來越強大（還可以直接遠端開發），雖然較晚進入擴充套件市場，但易用性及方便性極高，相信大家很快就會上手，</p>\n<p>如果本篇文章有幫到你的忙，<br>選單的<a href=\"https://www.paypal.me/ChenKuanSun\" target=\"_blank\">Donate</a>可以請我喝一杯英式紅茶拿鐵，<br>讓我有更多的咖啡因(X)</p>\n","prev":{"title":"AWS Serverless 實作 — 上","link":"2019/07/24/AWS_Serverless_03"},"next":{"title":"Unity Obstacle Tower 第一章：介紹","link":"2019/06/23/RL_02"},"plink":"https://chenkuansun.github.io/2019/07/19/AWS_Serverless_02/","toc":[{"id":"環境設定：","title":"環境設定：","index":"1"},{"id":"創建serverless範例專案","title":"創建Serverless範例專案","index":"2"},{"id":"部署","title":"部署","index":"3"},{"id":"結語：","title":"結語：","index":"4"}]}